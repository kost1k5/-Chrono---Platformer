
/**
 * –°–∏—Å—Ç–µ–º–∞ —Ü–µ–ª–µ–π –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è —É—Ä–æ–≤–Ω–µ–π
 * –°–ª–µ–¥—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—É Observer –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
 */
class ObjectiveSystem {
    constructor() {
        this.objectives = new Map();
        this.completedObjectives = new Set();
        this.listeners = [];
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        this.levelStats = {
            crystalsCollected: 0,
            totalCrystals: 0,
            timeElapsed: 0,
            deathCount: 0,
            secretAreasFound: 0,
            totalSecretAreas: 0,
            airTime: 0, // –í—Ä–µ–º—è –≤ –≤–æ–∑–¥—É—Ö–µ –¥–ª—è –∏—Å–ø—ã—Ç–∞–Ω–∏—è "–±–µ–∑ –∫–∞—Å–∞–Ω–∏—è –∑–µ–º–ª–∏"
            lastGroundTime: 0
        };
        
        // –¢–∏–ø—ã —Ü–µ–ª–µ–π
        this.objectiveTypes = {
            COLLECT_ALL_CRYSTALS: 'collect_all_crystals',
            TIME_TRIAL: 'time_trial',
            NO_DEATH: 'no_death',
            FIND_SECRETS: 'find_secrets',
            AIR_TIME: 'air_time', // –ò—Å–ø—ã—Ç–∞–Ω–∏–µ –±–µ–∑ –∫–∞—Å–∞–Ω–∏—è –∑–µ–º–ª–∏
            PERFECT_RUN: 'perfect_run' // –í—Å–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã + –≤—Ä–µ–º—è + –±–µ–∑ —Å–º–µ—Ä—Ç–µ–π
        };
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–ª–µ–π –¥–ª—è —É—Ä–æ–≤–Ω—è
     */
    initializeLevelObjectives(levelData) {
        this.objectives.clear();
        this.completedObjectives.clear();
        this.resetLevelStats();
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É—Ä–æ–≤–Ω—è
        this.levelStats.totalCrystals = this.countCrystals(levelData);
        this.levelStats.totalSecretAreas = this.countSecretAreas(levelData);
        
        // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ü–µ–ª–∏
        this.createStandardObjectives(levelData);
        
        // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω—è)
        if (levelData.objectives) {
            this.createCustomObjectives(levelData.objectives);
        }
    }
    
    /**
     * –ü–æ–¥—Å—á–µ—Ç –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω—è
     */
    countCrystals(levelData) {
        if (!levelData.entities) return 0;
        return levelData.entities.filter(entity => entity.type === 'crystal').length;
    }
    
    /**
     * –ü–æ–¥—Å—á–µ—Ç —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
     */
    countSecretAreas(levelData) {
        if (!levelData.secretAreas) return 0;
        return levelData.secretAreas.length;
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ü–µ–ª–µ–π
     */
    createStandardObjectives(levelData) {
        // –¶–µ–ª—å: —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã
        if (this.levelStats.totalCrystals > 0) {
            this.addObjective({
                id: 'collect_all_crystals',
                type: this.objectiveTypes.COLLECT_ALL_CRYSTALS,
                title: 'üíé –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä',
                description: `–°–æ–±–µ—Ä–∏—Ç–µ –≤—Å–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã (${this.levelStats.totalCrystals})`,
                targetValue: this.levelStats.totalCrystals,
                currentValue: 0,
                reward: {
                    score: this.levelStats.totalCrystals * 100,
                    badge: 'crystal_collector'
                }
            });
        }
        
        // –¶–µ–ª—å: –∑–∞–≤–µ—Ä—à–∏—Ç—å –±–µ–∑ —Å–º–µ—Ä—Ç–µ–π
        this.addObjective({
            id: 'no_death',
            type: this.objectiveTypes.NO_DEATH,
            title: 'üõ°Ô∏è –í—ã–∂–∏–≤—à–∏–π',
            description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –±–µ–∑ —Å–º–µ—Ä—Ç–µ–π',
            targetValue: 0,
            currentValue: 0,
            reward: {
                score: 500,
                badge: 'survivor'
            }
        });
        
        // –¶–µ–ª—å: –Ω–∞–π—Ç–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
        if (this.levelStats.totalSecretAreas > 0) {
            this.addObjective({
                id: 'find_secrets',
                type: this.objectiveTypes.FIND_SECRETS,
                title: 'üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
                description: `–ù–∞–π–¥–∏—Ç–µ –≤—Å–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ (${this.levelStats.totalSecretAreas})`,
                targetValue: this.levelStats.totalSecretAreas,
                currentValue: 0,
                reward: {
                    score: this.levelStats.totalSecretAreas * 200,
                    badge: 'explorer'
                }
            });
        }
        
        // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –≤ levelData)
        if (levelData.timeTrialTarget) {
            this.addObjective({
                id: 'time_trial',
                type: this.objectiveTypes.TIME_TRIAL,
                title: '‚è±Ô∏è –°–ø–∏–¥—Ä–∞–Ω–Ω–µ—Ä',
                description: `–ó–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞ ${this.formatTime(levelData.timeTrialTarget)}`,
                targetValue: levelData.timeTrialTarget,
                currentValue: 0,
                reward: {
                    score: 1000,
                    badge: 'speedrunner'
                }
            });
        }
        
        // –ò—Å–ø—ã—Ç–∞–Ω–∏–µ "–≤ –≤–æ–∑–¥—É—Ö–µ" (–µ—Å–ª–∏ –≤ —É—Ä–æ–≤–Ω–µ –µ—Å—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –ø—Ä—ã–∂–∫–æ–≤)
        if (this.hasJumpChallengeElements(levelData)) {
            this.addObjective({
                id: 'air_time',
                type: this.objectiveTypes.AIR_TIME,
                title: 'ü¶Ö –õ–µ—Ç—É–Ω',
                description: '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ 80% –≤—Ä–µ–º–µ–Ω–∏ –≤ –≤–æ–∑–¥—É—Ö–µ',
                targetValue: 0.8, // 80%
                currentValue: 0,
                reward: {
                    score: 800,
                    badge: 'air_master'
                }
            });
        }
        
        // –ò–¥–µ–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ
        this.addObjective({
            id: 'perfect_run',
            type: this.objectiveTypes.PERFECT_RUN,
            title: '‚≠ê –ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç',
            description: '–ò–¥–µ–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ: –≤—Å–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã, –±–µ–∑ —Å–º–µ—Ä—Ç–µ–π, –±—ã—Å—Ç—Ä–æ',
            targetValue: 1,
            currentValue: 0,
            isComposite: true, // –°–æ—Å—Ç–∞–≤–Ω–∞—è —Ü–µ–ª—å
            dependencies: ['collect_all_crystals', 'no_death'],
            reward: {
                score: 2000,
                badge: 'perfectionist'
            }
        });
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ü–µ–ª–µ–π
     */
    createCustomObjectives(customObjectives) {
        for (const objective of customObjectives) {
            this.addObjective(objective);
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä—ã–∂–∫–æ–≤–æ–≥–æ –∏—Å–ø—ã—Ç–∞–Ω–∏—è
     */
    hasJumpChallengeElements(levelData) {
        if (!levelData.entities) return false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä—É–∂–∏–Ω—è—â–∏—Ö –±–ª–æ–∫–æ–≤ –∏–ª–∏ –¥–≤–∏–∂—É—â–∏—Ö—Å—è –ø–ª–∞—Ç—Ñ–æ—Ä–º
        return levelData.entities.some(entity => 
            entity.type === 'spring_block' || entity.type === 'moving_platform'
        ) || (levelData.movingPlatforms && levelData.movingPlatforms.length > 0);
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–∏
     */
    addObjective(objective) {
        this.objectives.set(objective.id, {
            ...objective,
            isCompleted: false,
            completedAt: null
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Ä–æ–≤–Ω—è
     */
    updateLevelStats(stats) {
        Object.assign(this.levelStats, stats);
        this.checkObjectiveProgress();
    }
    
    /**
     * –°–æ–±—ã—Ç–∏–µ: –∫—Ä–∏—Å—Ç–∞–ª–ª —Å–æ–±—Ä–∞–Ω
     */
    onCrystalCollected() {
        this.levelStats.crystalsCollected++;
        this.checkObjectiveProgress();
        this.notifyListeners('crystal_collected', this.levelStats);
    }
    
    /**
     * –°–æ–±—ã—Ç–∏–µ: –∏–≥—Ä–æ–∫ —É–º–µ—Ä
     */
    onPlayerDeath() {
        this.levelStats.deathCount++;
        this.checkObjectiveProgress();
        this.notifyListeners('player_death', this.levelStats);
    }
    
    /**
     * –°–æ–±—ã—Ç–∏–µ: —Å–µ–∫—Ä–µ—Ç–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –Ω–∞–π–¥–µ–Ω–∞
     */
    onSecretAreaFound(areaId) {
        this.levelStats.secretAreasFound++;
        this.checkObjectiveProgress();
        this.notifyListeners('secret_found', { areaId, stats: this.levelStats });
    }
    
    /**
     * –°–æ–±—ã—Ç–∏–µ: –∏–≥—Ä–æ–∫ –ø—Ä–∏–∑–µ–º–ª–∏–ª—Å—è/–≤–∑–ª–µ—Ç–µ–ª
     */
    onGroundStateChanged(isGrounded, currentTime) {
        if (isGrounded) {
            if (this.levelStats.lastGroundTime > 0) {
                this.levelStats.airTime += currentTime - this.levelStats.lastGroundTime;
            }
        } else {
            this.levelStats.lastGroundTime = currentTime;
        }
        this.checkObjectiveProgress();
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —É—Ä–æ–≤–Ω—è
     */
    updateTime(timeElapsed) {
        this.levelStats.timeElapsed = timeElapsed;
        this.checkObjectiveProgress();
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—Å–µ—Ö —Ü–µ–ª–µ–π
     */
    checkObjectiveProgress() {
        for (const [id, objective] of this.objectives) {
            if (objective.isCompleted) continue;
            
            let isCompleted = false;
            let currentValue = objective.currentValue;
            
            switch (objective.type) {
                case this.objectiveTypes.COLLECT_ALL_CRYSTALS:
                    currentValue = this.levelStats.crystalsCollected;
                    isCompleted = this.levelStats.crystalsCollected >= this.levelStats.totalCrystals;
                    break;
                    
                case this.objectiveTypes.NO_DEATH:
                    currentValue = this.levelStats.deathCount;
                    isCompleted = this.levelStats.deathCount === 0;
                    break;
                    
                case this.objectiveTypes.TIME_TRIAL:
                    currentValue = this.levelStats.timeElapsed;
                    isCompleted = this.levelStats.timeElapsed <= objective.targetValue;
                    break;
                    
                case this.objectiveTypes.FIND_SECRETS:
                    currentValue = this.levelStats.secretAreasFound;
                    isCompleted = this.levelStats.secretAreasFound >= this.levelStats.totalSecretAreas;
                    break;
                    
                case this.objectiveTypes.AIR_TIME:
                    const totalTime = this.levelStats.timeElapsed;
                    const airTimeRatio = totalTime > 0 ? this.levelStats.airTime / totalTime : 0;
                    currentValue = airTimeRatio;
                    isCompleted = airTimeRatio >= objective.targetValue;
                    break;
                    
                case this.objectiveTypes.PERFECT_RUN:
                    if (objective.isComposite) {
                        isCompleted = this.checkCompositeObjective(objective);
                        currentValue = isCompleted ? 1 : 0;
                    }
                    break;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            objective.currentValue = currentValue;
            
            // –ï—Å–ª–∏ —Ü–µ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
            if (isCompleted && !objective.isCompleted) {
                this.completeObjective(id);
            }
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–∞–≤–Ω–æ–π —Ü–µ–ª–∏
     */
    checkCompositeObjective(objective) {
        if (!objective.dependencies) return false;
        
        return objective.dependencies.every(depId => {
            const dependency = this.objectives.get(depId);
            return dependency && dependency.isCompleted;
        });
    }
    
    /**
     * –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–µ–ª–∏
     */
    completeObjective(objectiveId) {
        const objective = this.objectives.get(objectiveId);
        if (!objective || objective.isCompleted) return;
        
        objective.isCompleted = true;
        objective.completedAt = performance.now();
        this.completedObjectives.add(objectiveId);
        
        this.notifyListeners('objective_completed', objective);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ UI
        if (window.gameInstance && window.gameInstance.ui) {
            // TODO: –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ showObjectiveCompleted –≤ UI
            // window.gameInstance.ui.showObjectiveCompleted(objective);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ü–µ–ª–µ–π
     */
    getAllObjectives() {
        return Array.from(this.objectives.values());
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π
     */
    getCompletedObjectives() {
        return Array.from(this.objectives.values()).filter(obj => obj.isCompleted);
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ü–µ–ª–µ–π –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
     */
    getOverallProgress() {
        const total = this.objectives.size;
        const completed = this.completedObjectives.size;
        return total > 0 ? (completed / total) * 100 : 0;
    }
    
    /**
     * –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Ä–æ–≤–Ω—è
     */
    resetLevelStats() {
        this.levelStats = {
            crystalsCollected: 0,
            totalCrystals: 0,
            timeElapsed: 0,
            deathCount: 0,
            secretAreasFound: 0,
            totalSecretAreas: 0,
            airTime: 0,
            lastGroundTime: 0
        };
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
     */
    formatTime(milliseconds) {
        const seconds = Math.floor(milliseconds / 1000);
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞
     */
    getFinalScore() {
        let totalScore = 0;
        
        for (const objective of this.getCompletedObjectives()) {
            if (objective.reward && objective.reward.score) {
                totalScore += objective.reward.score;
            }
        }
        
        // –ë–æ–Ω—É—Å –∑–∞ –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        const progressBonus = Math.floor(this.getOverallProgress() * 10);
        totalScore += progressBonus;
        
        return totalScore;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–∫–æ–≤
     */
    getEarnedBadges() {
        const badges = [];
        
        for (const objective of this.getCompletedObjectives()) {
            if (objective.reward && objective.reward.badge) {
                badges.push(objective.reward.badge);
            }
        }
        
        return badges;
    }
    
    // Observer pattern
    addListener(listener) {
        this.listeners.push(listener);
    }
    
    removeListener(listener) {
        const index = this.listeners.indexOf(listener);
        if (index !== -1) {
            this.listeners.splice(index, 1);
        }
    }
    
    notifyListeners(event, data) {
        for (const listener of this.listeners) {
            if (typeof listener === 'function') {
                listener(event, data);
            }
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ü–µ–ª–µ–π
     */
    update(deltaTime) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —É—Ä–æ–≤–Ω—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π
        this.updateTime(deltaTime);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ü–µ–ª–µ–π
        this.checkObjectiveProgress();
    }
}

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
 */
class SecretArea {
    constructor(x, y, width, height, id, reward = null) {
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
        this.id = id;
        this.reward = reward;
        this.isDiscovered = false;
        
        // –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        this.glowIntensity = 0;
        this.discoveryAnimation = {
            isActive: false,
            progress: 0,
            duration: 1000
        };
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–º
     */
    checkDiscovery(playerBounds) {
        if (this.isDiscovered) return false;
        
        const areaOverlap = (
            playerBounds.x < this.x + this.width &&
            playerBounds.x + playerBounds.width > this.x &&
            playerBounds.y < this.y + this.height &&
            playerBounds.y + playerBounds.height > this.y
        );
        
        if (areaOverlap) {
            this.discover();
            return true;
        }
        
        return false;
    }
    
    /**
     * –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
     */
    discover() {
        if (this.isDiscovered) return;
        
        this.isDiscovered = true;
        this.discoveryAnimation.isActive = true;
        this.discoveryAnimation.progress = 0;
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É —Ü–µ–ª–µ–π
        if (window.gameInstance && window.gameInstance.objectiveSystem) {
            window.gameInstance.objectiveSystem.onSecretAreaFound(this.id);
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
        if (this.reward) {
            this.applyReward();
        }
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã
     */
    applyReward() {
        if (!this.reward) return;
        
        switch (this.reward.type) {
            case 'crystal':
                // –°–æ–∑–¥–∞–µ–º –∫—Ä–∏—Å—Ç–∞–ª–ª –≤ —Ü–µ–Ω—Ç—Ä–µ –æ–±–ª–∞—Å—Ç–∏
                const centerX = this.x + this.width / 2;
                const centerY = this.y + this.height / 2;
                // –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∏—Å—Ç–∞–ª–ª–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
                break;
                
            case 'powerup':
                // –°–æ–∑–¥–∞–µ–º power-up
                // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫—Ä–∏—Å—Ç–∞–ª–ª—É
                break;
                
            case 'score':
                // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—É—é –∏–≥—Ä—É)
                if (window.gameInstance) {
                    window.gameInstance.score += this.reward.value || 100;
                }
                break;
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
     */
    update(deltaTime) {
        if (this.discoveryAnimation.isActive) {
            this.discoveryAnimation.progress += deltaTime;
            
            if (this.discoveryAnimation.progress >= this.discoveryAnimation.duration) {
                this.discoveryAnimation.isActive = false;
            }
        }
        
        // –≠—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
        if (this.isDiscovered) {
            this.glowIntensity = 0.5 + Math.sin(performance.now() / 200) * 0.3;
        }
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞)
     */
    draw(context, camera) {
        if (!this.isDiscovered) return;
        
        const screenPos = camera.worldToScreen({ x: this.x, y: this.y });
        
        context.save();
        
        if (this.isDiscovered) {
            // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
            context.fillStyle = `rgba(255, 215, 0, ${this.glowIntensity * 0.3})`;
            context.fillRect(screenPos.x, screenPos.y, this.width, this.height);
            
            context.strokeStyle = `rgba(255, 215, 0, ${this.glowIntensity})`;
            context.lineWidth = 2;
            context.strokeRect(screenPos.x, screenPos.y, this.width, this.height);
        }
        
        context.restore();
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–æ–≤
export { ObjectiveSystem, SecretArea };
