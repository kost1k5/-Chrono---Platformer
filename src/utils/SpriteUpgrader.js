// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ SVG –≤ PNG –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —Å–ø—Ä–∞–π—Ç–æ–≤
class SpriteUpgrader {
    constructor() {
        this.canvas = document.createElement('canvas');
        this.ctx = this.canvas.getContext('2d');
        this.spriteConfigs = {
            idle: { frames: 1, interval: 100 },
            run: { frames: 7, interval: 120 },
            jump: { frames: 1, interval: 100 },
            fall: { frames: 1, interval: 100 },
            doublejump: { frames: 7, interval:80 }
        };
    }

    async convertSVGtoPNG(svgPath, outputPath, width = 32, height = 50) {
        return new Promise((resolve, reject) => {
            const img = new Image();
            
            img.onload = () => {
                this.canvas.width = width;
                this.canvas.height = height;
                
                // –û—á–∏—Å—Ç–∫–∞ canvas
                this.ctx.clearRect(0, 0, width, height);
                
                // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å –∞–Ω—Ç–∏–∞–ª–∏–∞—Å–∏–Ω–≥–æ–º
                this.ctx.imageSmoothingEnabled = false; // –î–ª—è –ø–∏–∫—Å–µ–ª—å-–∞—Ä—Ç–∞
                this.ctx.drawImage(img, 0, 0, width, height);
                
                // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ PNG
                this.canvas.toBlob((blob) => {
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = outputPath;
                    a.click();
                    URL.revokeObjectURL(url);
                    resolve();
                }, 'image/png');
            };
            
            img.onerror = reject;
            img.src = svgPath;
        });
    }

    async convertRunSpriteSheet(svgPath, outputPath) {
        return new Promise((resolve, reject) => {
            const img = new Image();
            
            img.onload = () => {
                // –†–∞–∑–º–µ—Ä—ã –¥–ª—è —Å–ø—Ä–∞–π—Ç-–ª–∏—Å—Ç–∞ –±–µ–≥–∞ (7 –∫–∞–¥—Ä–æ–≤)
                const frameWidth = 32;
                const frameHeight = 50;
                const totalFrames = 7;
                
                this.canvas.width = frameWidth * totalFrames;
                this.canvas.height = frameHeight;
                
                this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
                this.ctx.imageSmoothingEnabled = false;
                this.ctx.drawImage(img, 0, 0);
                
                this.canvas.toBlob((blob) => {
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = outputPath;
                    a.click();
                    URL.revokeObjectURL(url);
                    resolve();
                }, 'image/png');
            };
            
            img.onerror = reject;
            img.src = svgPath;
        });
    }

    async upgradeSprites() {
        console.log('üé® –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–π—Ç–æ–≤...');
        
        try {
            // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Å–ø—Ä–∞–π—Ç–æ–≤
            await this.convertSVGtoPNG('assets/images/player_idle_new.svg', 'player_idle_upgraded.png');
            await this.convertSVGtoPNG('assets/images/player_jump_new.svg', 'player_jump_upgraded.png');
            await this.convertSVGtoPNG('assets/images/player_fall_new.svg', 'player_fall_upgraded.png');
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–ø—Ä–∞–π—Ç-–ª–∏—Å—Ç–æ–≤
            await this.convertRunSpriteSheet('assets/images/player_run_new.svg', 'player_run_upgraded.png');
            await this.convertRunSpriteSheet('assets/images/player_doublejump_new.svg', 'player_doublejump_upgraded.png');
            
            console.log('‚úÖ –°–ø—Ä–∞–π—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
            console.log('üìù –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–∏—Ç–µ –ø—É—Ç–∏ –≤ Player.js');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø—Ä–∞–π—Ç–æ–≤:', error);
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è Player.js
    generatePlayerCode() {
        return `
// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–ø—Ä–∞–π—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–æ–π
createSprites() {
    this.sprites = {
        idle: new Sprite(
            'assets/images/player_idle_upgraded.png',
            32, 50, 1, 100, true
        ),
        run: new Sprite(
            'assets/images/player_run_upgraded.png',
            32, 50, 7, 120, true
        ),
        jump: new Sprite(
            'assets/images/player_jump_upgraded.png',
            32, 50, 1, 100, true
        ),
        fall: new Sprite(
            'assets/images/player_fall_upgraded.png',
            32, 50, 1, 100, true
        ),
        doublejump: new Sprite(
            'assets/images/player_doublejump_upgraded.png',
            32, 50, 7, 80, true
        )
    };
    
    this.currentSprite = this.sprites.idle;
}`;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø—Ä–∞–π—Ç–æ–≤
const spriteUpgrader = new SpriteUpgrader();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof module !== 'undefined' && module.exports) {
    module.exports = SpriteUpgrader;
}